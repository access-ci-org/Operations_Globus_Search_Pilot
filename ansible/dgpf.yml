##################################
#
#  Frontend web server
#
##################################
- name: Put ssl certs in place
  copy:
    src: "files/certs/{{ item }}"
    dest: "/etc/ssl/certs/{{ item }}"
    mode: 0644
  with_items:
    - operations-api.access-ci.org.pub
    - operations-api.access-ci.org.chain.pub
    - incommon_rsa_chain.pem
    - incommon-ssl.pem

- name: Put ssl key in place
  copy:
    src: "files/certs/{{ item }}"
    dest: "/etc/ssl/private/{{ item }}"
    mode: 0600
  with_items:
    - operations-api.access-ci.org.key

- name: Remove default site
  ansible.builtin.file:
    path: "/etc/nginx/sites-enabled/default"
    state: absent

- name: Install nginx site
  ansible.builtin.template:
    src: "files/nginx/{{ item }}"
    dest: "/etc/nginx/sites-available/{{ item }}"
    mode: 0600
  with_items:
    - nginx.opsapi

- name: Enable nginx site
  file:
    src: /etc/nginx/sites-available/nginx.opsapi
    path: /etc/nginx/sites-enabled/nginx.opsapi
    state: link

##################################
#
#  Backend application
#
##################################
- name: Install application config
  ansible.builtin.template:
    src: "files/apps/{{ app_source_name }}/{{ item }}"
    dest: "{{ app_home }}/conf/{{ item | basename | regex_replace('.j2','') }}"
    owner: software
    group: admin
    mode: 0644
  with_items:
    - "{{ app_name }}.gunicorn.conf.py.j2"
    - "{{ app_name }}.conf.j2"

- name: Install application sbin
  ansible.builtin.template:
    src: "files/apps/{{ app_source_name }}/{{ item }}"
    dest: "{{ app_home }}/sbin/{{ item | basename | regex_replace('.j2','') }}"
    owner: software
    group: admin
    mode: 0755
  with_items:
    - "{{ app_name }}.sh.j2"
    - "manage.api.sh.j2"

- name: Install application systemd services
  ansible.builtin.template:
    src: "files/apps/{{ app_source_name }}/{{ item }}.j2"
    dest: "/etc/systemd/system/{{ item }}"
  with_items:
    - "{{ app_name }}.service"

- name: Enable backend services
  ansible.builtin.systemd:
    name: "{{ item }}"
    enabled: true
    state: started
    daemon_reload: true
  with_items:
    - "{{ app_name }}.service"

#################################
#
#    Static content
#
##################################
- name: Collect static content
  become_user: software
  ansible.builtin.command: "{{ app_home }}/sbin/manage.api.sh collectstatic --noinput"

##################################
#
#  Backend memcached service
#
##################################
- name: Install memcached configuration
  copy:
    src: "files/memcached/{{ item }}"
    dest: "/etc/{{ item }}"
    mode: 0644
  with_items:
    - "memcached.conf"
