##################################
#
#   Set API server SELinux fcontext
#
##################################
- name: Set API server SELinux Fcontext
  when: (web_server|default(false)|bool == true and enable_selinux == true)
  block:
    - name: Set fcontext for web content
      become: true
      sefcontext:
        target: "{{ item }}"
        setype: httpd_user_ra_content_t
      with_items:
        - "{{ app_web_home }}(/.*)?"

    - name: Set fcontext for web libraries
      become: true
      sefcontext:
        target: "{{ item }}"
        setype: lib_t
      with_items:
        - "{{ app_home }}/tags(/.*)?"

    - name: Set fcontext for web logging
      become: true
      sefcontext:
        target: "{{ item }}"
        setype: httpd_log_t
      with_items:
        - "{{ app_home }}/var(/.*)?"
#       - "/var/log/django(/.*)?"

##################################
#
#    Create DGPF directories and contents
#
##################################
- name: Create DGPF deployment directory structure
  become: true
  file:
    path: "{{ item }}"
    owner: software
    group: admin
    mode: 0755
    state: directory
  with_items:
    - "/soft"
    - "{{ app_home }}"
    - "{{ app_home }}/bin"
    - "{{ app_home }}/conf"
    - "{{ app_home }}/run"
    - "{{ app_home }}/sbin"
    - "{{ app_home }}/tags"
    - "{{ app_home }}/tmp"
    - "{{ app_home }}/var"
    - "{{ app_home }}/www"
    - "{{ app_home }}/www/static"

#- name: Install DGPF conf/django_prod_mgmt.conf file
#  become: true
#  template:
#    src: "files/apps/{{ app_source_name }}/django_prod_mgmt.conf.j2"
#    dest: "{{ app_home }}/conf/django_prod_mgmt.conf"
#    owner: software
#    group: admin
#    mode: 0644

#- name: Install dgpf sbin files
#  become: true
#  template:
#    src: "files/apps/{{ app_source_name }}/manage.prod.sh.j2"
#    dest: "{{ app_home }}/sbin/manage.prod.sh"
#    owner: software
#    group: admin
#    mode: 0755

##################################
#
#    Create Pipenv
#
##################################
- name: Install Pipenv files
  become_user: software
  copy:
    src: "{{ app_pipenv_config }}/{{ item }}"
    dest: "{{ app_home }}/{{ item }}"
    mode: 0644
  with_items:
    - Pipfile
    - Pipfile.lock

- include_tasks: pipenv_v2.yml
  vars:
    pipenv_project_home: "{{ app_home }}"
    pipenv_project_name: "{{ app_runtime_name }}"
    pipenv_config_source: "{{ app_pipenv_config }}"
    pipenv_config_name: "{{ app_pipenv_config.split('/')[-1] }}"

##################################
#
#   Checkout DGPF Django code
#
##################################
- name: GIT Checkout DGPF to tags directory
  become: true
  become_user: software
  git:
    repo: "{{ app_git }}"
    dest: "{{ app_home }}/tags/{{ dgpf_tag }}/"
    version: "{{ dgpf_tag }}"
# creates: {{ app_home }}/tags/{{ dgpf_tag }}/

- name: Pre-compile DGPF Python
  shell: "export LD_LIBRARY_PATH={{ base_python_base }}/lib;{{ base_python_bin }} -m compileall -q {{ app_home }}/tags/{{ dgpf_tag }}/"
  become: true
  become_user: software

- name: Link PROD to checked out tag
  become: true
  become_user: software
  file:
    path: "{{ app_home }}/PROD"
    src: "{{ app_home }}/tags/{{ dgpf_tag }}"
    state: link
    force: yes
    seuser: system_u
    serole: object_r
    setype: lib_t
    selevel: s0

#- name: chcon PROD
#  ansible.builtin.command: "chcon -h -t httpd_sys_content_t {{ app_home }}/PROD"
#  become: true

#- name: restorecon dgpf files
#  ansible.builtin.command: "/sbin/restorecon -R {{ app_home }}/tags/{{ dgpf_tag }}"
#  become: true
#  debugger: on_failed

##################################
#
#    Final API server runtime directories and files
#
##################################
- name: Runtime directories and files
  when: (web_server|default(false)|bool == true and enable_selinux == true)
  block:
#   - name: Create API server log directory
#     become: true
#     file:
#       path: "{{ item }}"
#       owner: apache
#       group: apache
#       mode: 0755
#       state: directory
#     with_items:
#       - /var/log/django

    - name: Put web root directory in place
      become: true
      template:
        src: "files/apps/{{ app_source_name }}/hello.txt"
        dest: "{{ app_web_home }}"
        owner: software
        group: admin
        mode: 0644

    - name: Put robots.txt in place
      become: true
      copy:
        src: "files/httpd/webserver/robots.txt"
        dest: "{{ app_web_home }}"
        owner: software
        group: admin
        mode: 0644

    - name: Install dgpf conf/django_prod_api.conf file
      become: true
      template:
        src: "files/apps/{{ app_source_name }}/django_prod_api.j2"
        dest: "{{ app_home }}/conf/django_prod_api.conf"
        owner: software
        group: admin
        mode: 0644

    - name: Put dgpf sbin/wsgi_prod.py file in place
      become: true
      copy:
        src: "files/apps/{{ app_source_name }}/wsgi_prod.py"
        dest: "{{ app_home }}/sbin/"
        owner: software
        group: admin
        mode: 0755

##################################
#
#    Final SELinux settings
#
##################################
- name: Runtime directories and files SELinux
  when: (web_server|default(false)|bool == true and enable_selinux == true)
  block:
    - name: Set SELinux setype httpd_user_ra_content_t
      become: true
      file:
        path: "{{ item }}"
#       seuser: system_u
#       serole: object_r
        setype: httpd_user_ra_content_t
        selevel: s0
        recurse: yes
      with_items:
        - "{{ app_web_home }}"
        - "{{ app_home }}"

    - name: Set SELinux setype lib_t
      become: true
      file:
        path: "{{ item }}"
#       seuser: system_u
#       serole: object_r
        setype: lib_t
        selevel: s0
      with_items:
        - "{{ app_home }}/tags"
        - "{{ app_home }}/sbin"
        - "{{ app_home }}/sbin/wsgi_prod.py"

    - name: Set SELinux setype httpd_log_t
      become: true
      file:
        path: "{{ item }}"
#       seuser: system_u
#       serole: object_r
        setype: httpd_log_t
        selevel: s0
      with_items:
        - "{{ app_home }}/var"
#       - /var/log/django
